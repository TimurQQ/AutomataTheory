/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : StateMachine.sm
 */


public class StateMachineContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public StateMachineContext(StateMachine owner)
    {
        this (owner, MainMap.Start);
    }

    public StateMachineContext(StateMachine owner, StateMachineState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void Colon()
    {
        _transition = "Colon";
        getState().Colon(this);
        _transition = "";
        return;
    }

    public void Comma()
    {
        _transition = "Comma";
        getState().Comma(this);
        _transition = "";
        return;
    }

    public void Digit(char digit)
    {
        _transition = "Digit";
        getState().Digit(this, digit);
        _transition = "";
        return;
    }

    public void EOS()
    {
        _transition = "EOS";
        getState().EOS(this);
        _transition = "";
        return;
    }

    public void EqStatement()
    {
        _transition = "EqStatement";
        getState().EqStatement(this);
        _transition = "";
        return;
    }

    public void Letter(char letter)
    {
        _transition = "Letter";
        getState().Letter(this, letter);
        _transition = "";
        return;
    }

    public void Plus()
    {
        _transition = "Plus";
        getState().Plus(this);
        _transition = "";
        return;
    }

    public void RequestStartSign()
    {
        _transition = "RequestStartSign";
        getState().RequestStartSign(this);
        _transition = "";
        return;
    }

    public void Semicolon()
    {
        _transition = "Semicolon";
        getState().Semicolon(this);
        _transition = "";
        return;
    }

    public void Sign(char sign)
    {
        _transition = "Sign";
        getState().Sign(this, sign);
        _transition = "";
        return;
    }

    public void Unknown()
    {
        _transition = "Unknown";
        getState().Unknown(this);
        _transition = "";
        return;
    }

    public StateMachineState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((StateMachineState) _state);
    }

    protected StateMachine getOwner()
    {
        return (_owner);
    }

    public void setOwner(StateMachine owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private StateMachine _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class StateMachineState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected StateMachineState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(StateMachineContext context) {}
        protected void exit(StateMachineContext context) {}

        protected void Colon(StateMachineContext context)
        {
            Default(context);
        }

        protected void Comma(StateMachineContext context)
        {
            Default(context);
        }

        protected void Digit(StateMachineContext context, char digit)
        {
            Default(context);
        }

        protected void EOS(StateMachineContext context)
        {
            Default(context);
        }

        protected void EqStatement(StateMachineContext context)
        {
            Default(context);
        }

        protected void Letter(StateMachineContext context, char letter)
        {
            Default(context);
        }

        protected void Plus(StateMachineContext context)
        {
            Default(context);
        }

        protected void RequestStartSign(StateMachineContext context)
        {
            Default(context);
        }

        protected void Semicolon(StateMachineContext context)
        {
            Default(context);
        }

        protected void Sign(StateMachineContext context, char sign)
        {
            Default(context);
        }

        protected void Unknown(StateMachineContext context)
        {
            Default(context);
        }

        protected void Default(StateMachineContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
    // Constants.
    //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class MainMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final MainMap_Start Start =
            new MainMap_Start("MainMap.Start", 0);
        public static final MainMap_GetNumbers GetNumbers =
            new MainMap_GetNumbers("MainMap.GetNumbers", 1);
        public static final MainMap_GetDigits GetDigits =
            new MainMap_GetDigits("MainMap.GetDigits", 2);
        public static final MainMap_GetMessage GetMessage =
            new MainMap_GetMessage("MainMap.GetMessage", 3);
        public static final MainMap_GetBody GetBody =
            new MainMap_GetBody("MainMap.GetBody", 4);
        public static final MainMap_GetBodyText GetBodyText =
            new MainMap_GetBodyText("MainMap.GetBodyText", 5);
        public static final MainMap_Unacceptable Unacceptable =
            new MainMap_Unacceptable("MainMap.Unacceptable", 6);
        public static final MainMap_Acceptable Acceptable =
            new MainMap_Acceptable("MainMap.Acceptable", 7);
    }

    protected static class MainMap_Default
        extends StateMachineState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected MainMap_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_Start
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_Start(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Colon(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            if (ctxt.isCorrectType())
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.setMessageType();
                    ctxt.clearBuffer();
                }
                finally
                {
                    context.setState(MainMap.GetNumbers);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.Colon(context);
            }

            return;
        }

        @Override
        protected void Default(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.setUnacceptable();
            }
            finally
            {
                context.setState(MainMap.Unacceptable);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void Letter(StateMachineContext context, char letter)
        {
            StateMachine ctxt = context.getOwner();

            if (ctxt.checkSymCount(3))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.addToBuffer(letter);
                }
                finally
                {
                    context.setState(MainMap.Start);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.Letter(context, letter);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_GetNumbers
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_GetNumbers(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.setUnacceptable();
            }
            finally
            {
                context.setState(MainMap.Unacceptable);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void Plus(StateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(MainMap.GetDigits);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_GetDigits
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_GetDigits(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Comma(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            if (!ctxt.checkSymCount(11))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.addNumber();
                    ctxt.clearBuffer();
                }
                finally
                {
                    context.setState(MainMap.GetNumbers);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.Comma(context);
            }

            return;
        }

        @Override
        protected void Default(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.setUnacceptable();
            }
            finally
            {
                context.setState(MainMap.Unacceptable);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void Digit(StateMachineContext context, char digit)
        {
            StateMachine ctxt = context.getOwner();

            if (ctxt.checkSymCount(11))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.addToBuffer(digit);
                }
                finally
                {
                    context.setState(MainMap.GetDigits);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.Digit(context, digit);
            }

            return;
        }

        @Override
        protected void Semicolon(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            if (!ctxt.checkSymCount(11))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.addNumber();
                    ctxt.clearBuffer();
                }
                finally
                {
                    context.setState(MainMap.GetMessage);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.Semicolon(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_GetMessage
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_GetMessage(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.setUnacceptable();
            }
            finally
            {
                context.setState(MainMap.Unacceptable);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void EOS(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.setAcceptable();
            }
            finally
            {
                context.setState(MainMap.Acceptable);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void RequestStartSign(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            if (ctxt.isSMS())
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(MainMap.GetBody);
                (context.getState()).entry(context);
            }
            else
            {
                super.RequestStartSign(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_GetBody
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_GetBody(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.setUnacceptable();
            }
            finally
            {
                context.setState(MainMap.Unacceptable);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void EqStatement(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            if (ctxt.isCorrectParam())
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.clearBuffer();
                }
                finally
                {
                    context.setState(MainMap.GetBodyText);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.EqStatement(context);
            }

            return;
        }

        @Override
        protected void Letter(StateMachineContext context, char letter)
        {
            StateMachine ctxt = context.getOwner();

            if (ctxt.checkSymCount(4))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.addToBuffer(letter);
                }
                finally
                {
                    context.setState(MainMap.GetBody);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.Letter(context, letter);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_GetBodyText
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_GetBodyText(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Comma(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            if (ctxt.checkSymCount(64))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.addToBuffer(',');
                }
                finally
                {
                    context.setState(MainMap.GetBodyText);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.Comma(context);
            }

            return;
        }

        @Override
        protected void Default(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.setUnacceptable();
            }
            finally
            {
                context.setState(MainMap.Unacceptable);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void Digit(StateMachineContext context, char digit)
        {
            StateMachine ctxt = context.getOwner();

            if (ctxt.checkSymCount(64))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.addToBuffer(digit);
                }
                finally
                {
                    context.setState(MainMap.GetBodyText);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.Digit(context, digit);
            }

            return;
        }

        @Override
        protected void EOS(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.setMessageBody();
                ctxt.setAcceptable();
            }
            finally
            {
                context.setState(MainMap.Acceptable);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void Letter(StateMachineContext context, char letter)
        {
            StateMachine ctxt = context.getOwner();

            if (ctxt.checkSymCount(64))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.addToBuffer(letter);
                }
                finally
                {
                    context.setState(MainMap.GetBodyText);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.Letter(context, letter);
            }

            return;
        }

        @Override
        protected void RequestStartSign(StateMachineContext context)
        {
            StateMachine ctxt = context.getOwner();

            if (ctxt.checkSymCount(64))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.addToBuffer('?');
                }
                finally
                {
                    context.setState(MainMap.GetBodyText);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.RequestStartSign(context);
            }

            return;
        }

        @Override
        protected void Sign(StateMachineContext context, char sign)
        {
            StateMachine ctxt = context.getOwner();

            if (ctxt.checkSymCount(64))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.addToBuffer(sign);
                }
                finally
                {
                    context.setState(MainMap.GetBodyText);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                super.Sign(context, sign);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_Unacceptable
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_Unacceptable(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(StateMachineContext context)
        {

            return;
        }

        @Override
        protected void Unknown(StateMachineContext context)
        {

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_Acceptable
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_Acceptable(String name, int id)
        {
            super (name, id);
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
